# -*- coding: utf-8 -*-
"""NTFX.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bsrXv8eAL1TnOq0uFMWS8srF68Y-STrw
"""

# Import Libraries
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import LSTM, Dense, Dropout
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv('/content/NFLX.csv')

# Data Preprocessing
data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace=True)

# Feature Selection
# We are selecting the 'Close' price as the target variable for prediction.
data = data[['Close']]

# Feature Engineering
data['5_MA'] = data['Close'].rolling(window=5).mean()  # 5-day moving average
data['30_MA'] = data['Close'].rolling(window=30).mean()  # 30-day moving average
data['Volatility'] = data['Close'].rolling(window=5).std()  # 5-day volatility
data['Returns'] = data['Close'].pct_change()  # Daily returns

# Drop NA values created by rolling calculations
data.dropna(inplace=True)

# Scale the data (normalization)
scaler = MinMaxScaler(feature_range=(0, 1))
data_scaled = scaler.fit_transform(data)

# Train-test Split
train_size = int(len(data_scaled) * 0.8)  # 80% for training, 20% for testing
train_data = data_scaled[:train_size]
test_data = data_scaled[train_size:]

# Prepare training data
lookback = 90
X_train, y_train = [], []
X_test, y_test = [], []

# Create the training dataset
for i in range(lookback, len(train_data)):
    X_train.append(train_data[i-lookback:i])
    y_train.append(train_data[i, 0])  # 'Close' is the first column

# Create the testing dataset
for i in range(lookback, len(test_data)):
    X_test.append(test_data[i-lookback:i])
    y_test.append(test_data[i, 0])  # 'Close' is the first column

# Convert lists to numpy arrays
X_train, y_train = np.array(X_train), np.array(y_train)
X_test, y_test = np.array(X_test), np.array(y_test)

# LSTM Model
model = Sequential()
model.add(LSTM(units=60, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))
model.add(Dropout(0.2))
model.add(LSTM(units=60, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(units=1))

# Compile the model using Adam optimizer and mean squared error loss function, then fit the model on the training data for 50 epochs with a batch size of 32.
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train, y_train, epochs=50, batch_size=32)

# Predictions
train_predictions = model.predict(X_train)
test_predictions = model.predict(X_test)

# Inverse transform to get actual prices
train_predictions = scaler.inverse_transform(np.concatenate((train_predictions, np.zeros((train_predictions.shape[0], 4))), axis=1))[:, 0]
y_train_actual = scaler.inverse_transform(np.concatenate((y_train.reshape(-1, 1), np.zeros((y_train.shape[0], 4))), axis=1))[:, 0]
test_predictions = scaler.inverse_transform(np.concatenate((test_predictions, np.zeros((test_predictions.shape[0], 4))), axis=1))[:, 0]
y_test_actual = scaler.inverse_transform(np.concatenate((y_test.reshape(-1, 1), np.zeros((y_test.shape[0], 4))), axis=1))[:, 0]

# Evaluation Metrics
train_mse = mean_squared_error(y_train_actual, train_predictions)
train_mae = mean_absolute_error(y_train_actual, train_predictions)
train_r2 = r2_score(y_train_actual, train_predictions)

test_mse = mean_squared_error(y_test_actual, test_predictions)
test_mae = mean_absolute_error(y_test_actual, test_predictions)
test_r2 = r2_score(y_test_actual, test_predictions)

print(f"Train MSE: {train_mse:.4f}, Train MAE: {train_mae:.4f}, R2: {train_r2:.4f}")
print(f"Test MSE: {test_mse:.4f}, Test MAE: {test_mae:.4f}, R2: {test_r2:.4f}")

# Print accuracy metrics
print("Training Accuracy Metrics:")
print(f"Train MSE: {train_mse:.4f}, Train MAE: {train_mae:.4f}, R²: {train_r2:.4f}")
print("\nTesting Accuracy Metrics:")
print(f"Test MSE: {test_mse:.4f}, Test MAE: {test_mae:.4f}, R²: {test_r2:.4f}")

# Plotting the results
plt.figure(figsize=(14, 6))
plt.plot(data.index[lookback:train_size], y_train_actual, color='blue', label='Actual Train Price')
plt.plot(data.index[lookback:train_size], train_predictions, color='red', label='Predicted Train Price')
plt.plot(data.index[train_size + lookback:], y_test_actual, color='blue', linestyle='dotted', label='Actual Test Price')
plt.plot(data.index[train_size + lookback:], test_predictions, color='green', linestyle='dotted', label='Predicted Test Price')
plt.title('Netflix Stock Price Prediction')
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.legend()
plt.show()